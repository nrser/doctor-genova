from functools import partial
from typing import Any, cast

from novella.templates.mkdocs import MkdocsTemplate, MkdocsUpdateConfigAction
from novella.novella import NovellaContext
from novella.markdown.flavor import MkDocsFlavor
from novella.action import CopyFilesAction, RunAction
from novella.markdown.tags.anchor import AnchorTagProcessor
from novella.markdown.preprocessor import MarkdownPreprocessorAction


class DrGenMkdocsTemplate(MkdocsTemplate):
    """This is an extension of `novella.templates.mkdocs.MkdocsTemplate` simply
    to facilitate passing the `--dev-addr` flag to control the damn bind address
    and port the thing will `--serve` on. Which is... useful, to say the least.

    Doc on that option (along with the rest of Mkdocs config) here:

    https://www.mkdocs.org/user-guide/configuration/#dev_addr

    From what I could tell, due to the way that the parent class is implemented
    we needed to re-implemented all of `define_pipeline` in order to
    get at the section where the adding of additional arguments happens. I'm
    sure that fragile approach will snap at some point down the road, but for
    the moment (2022-12-21) it works.

    However, this class does allow subclasses to add additional pass-through
    options without re-implementing again by overriding the `configure_options`
    and `configure_run` methods.
    """

    def configure_options(self, context: NovellaContext) -> None:
        # The ones configured in `MkdocsTemplate`

        context.option("serve", description="Use mkdocs serve", flag=True)
        context.option(
            "site-dir",
            description='Build directory for MkDocs (defaults to "_site")',
            default="_site",
            metavar="PATH",
        )

        context.option(
            "base-url",
            description=(
                "The base URL to prefix to autogenerated link inside the "
                "documentation."
            ),
            metavar="URL",
        )

        # Additions

        context.option(
            "dev-addr",
            description=(
                "Address to --serve docs at, see "
                "https://www.mkdocs.org/user-guide/configuration/#dev_addr"
            ),
            metavar="DEV_ADDR",
        )

        context.option(
            "site-url",
            description="""
                Set the canonical URL of the site by setting `site_url` in the
                mkdocs configuration.

                See https://www.mkdocs.org/user-guide/configuration/#site_url

                Example: http://nrser.com/splatlog
            """
        )

    def configure_run(self, context: NovellaContext, run: RunAction) -> None:
        run.args = ["mkdocs"]

        if context.options["serve"]:
            run.supports_reloading = True
            run.args += ["serve"]
            if dev_addr := context.options.get("dev-addr"):
                run.args += ["--dev-addr", dev_addr]
        else:
            run.args += [
                "build",
                "-d",
                context.project_directory / str(context.options["site-dir"]),
            ]

    def define_pipeline(self, context: NovellaContext) -> None:
        self.configure_options(context)

        copy_files = cast(
            CopyFilesAction, context.do("copy-files", name="copy-files")
        )
        copy_files.paths = [self.content_directory]
        if (context.project_directory / "mkdocs.yml").exists():
            copy_files.paths.append("mkdocs.yml")

        update_config = cast(
            MkdocsUpdateConfigAction,
            context.do("mkdocs-update-config", name="mkdocs-update-config"),
        )
        update_config.content_directory = self.content_directory

        preprocessor = cast(
            MarkdownPreprocessorAction,
            context.do("preprocess-markdown", name="preprocess-markdown"),
        )
        preprocessor.path = self.content_directory

        def configure_anchor(anchor: AnchorTagProcessor) -> None:
            anchor.flavor = MkDocsFlavor(
                cast("str | None", context.options["base-url"])
                or self.base_url
                or ""
            )

        context.delay(
            lambda: preprocessor.preprocessor(
                "anchor", cast(Any, configure_anchor)
            )
        )

        def set_site_url():
            if site_url:= context.options.get("site-url"):
                update_config.update("$.site_url", set=site_url)

        context.delay(set_site_url)

        context.do(
            "run", partial(self.configure_run, context), name="mkdocs-run"
        )
